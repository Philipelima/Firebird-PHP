<?php

namespace FirebdPHP\Firebird;

use PDOException;

class Table
{
    /**
     * Returns a query string to create a table with the given name and columns
     */
    public static function create(string $name, array $columns)
    {
        $columnNames = array_keys($columns);
        $columnAttributes = array_values($columns);

        $treatedColumns = array_map("self::columnAsSQL", $columnNames, $columnAttributes);

        // Reduces the array of columns in a string
        $columnsAsString = array_reduce($treatedColumns, fn ($final, $column) => $final .= $column, "");

        //TODO: Remove last comma
        //TODO: Screams with firebird 2.x user

        return "CREATE TABLE  $name ($columnsAsString)";
    }

    private static function getFieldTypeAndNullability(string $type)
    {
        $nullable = $type[-1] == "?";

        if ($nullable) {
            // Returns the type without 
            $cleanType = substr($type, 0, -1);
            return [$cleanType, ""];
        }

        return [$type, "not null"];
    }

    // Used to transform the column from array item to string
    private static function columnAsSQL(string $columnName, array $columnAttributes)
    {
        $temporaryType = $columnAttributes["type"];
        [$type, $notNull] = self::getFieldTypeAndNullability($temporaryType);

        $stringLike = ["varchar", "char"];

        if (in_array($type, $stringLike)) {
            if (!$columnAttributes["limit"]) throw new PDOException("Cannot create field $columnName of type $type without limit value");
            $limit = $columnAttributes['limit'];
            $type = "$type($limit)";
        }

        $autoIncrement = in_array("primary", $columnAttributes) ? "generated by default" : "";
        $isPrimaryKey = in_array("primary", $columnAttributes) ? "primary key" : "";

        if ($isPrimaryKey && $autoIncrement) {
            $isPrimaryKey = "as identity primary key";
        }

        // A field is not unique by default, if it is set to be unique but is a primary key theres no need to put "unique" explicitly 
        $isUnique = in_array("unique", $columnAttributes);
        $unique = ($isUnique && !$isPrimaryKey) ? "unique" : "";

        // field integer not null generated by default as identity primary key,
        // field integer not null generated by default as identity primary key,
        return "$columnName $type $notNull $autoIncrement $isPrimaryKey $unique, ";
    }
}
